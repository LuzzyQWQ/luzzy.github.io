<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Android Studio开发学习</title>
    <link href="/2020/10/26/Android-Studio%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/10/26/Android-Studio%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>xml文件为布局文件。</p><ul><li><code>color.xml</code>为颜色布局文件</li><li><code>strings.xml</code> 字符串布局文件（字符串常量？）<br>逻辑实现在<code>java</code>中。</li></ul><p>如果添加了新Layout，就必须在<code>Mainfest.xml</code>中声明<code>activity</code></p><h3 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h3><h4 id="添加页面"><a href="#添加页面" class="headerlink" title="添加页面"></a>添加页面</h4><pre><code class="hljs java">setContentView(R.layout.layoutname)</code></pre><pre><code class="hljs kotlin"><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(savedInstanceState: <span class="hljs-type">Bundle</span>?)</span></span> &#123;    <span class="hljs-keyword">super</span>.onCreate(savedInstanceState)    setContentView(R.layout.layoutname)&#125;</code></pre><h4 id="添加按钮"><a href="#添加按钮" class="headerlink" title="添加按钮"></a>添加按钮</h4><pre><code class="hljs java"><span class="hljs-comment">// 添加 add按钮</span><span class="hljs-keyword">final</span> Button addButton = findViewById(R.id.addProduct);<span class="hljs-comment">// 添加view</span>addButton.setOnClickListener(<span class="hljs-keyword">new</span> View.OnClickListener()&#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onClick</span><span class="hljs-params">(View v)</span></span><span class="hljs-function">        </span>&#123;        &#125;    &#125;);</code></pre><pre><code class="hljs Kotlin"><span class="hljs-comment">// kotlin</span>JumpToTarget.setOnClickListener &#123;    startActivity(Intent(<span class="hljs-keyword">this</span>,TargetPage::<span class="hljs-keyword">class</span>.java))&#125;</code></pre><h4 id="保存缓存"><a href="#保存缓存" class="headerlink" title="保存缓存"></a>保存缓存</h4><p>使用<code>getSharedPreferences()</code> 来设置数据库字典</p><p><code>apply</code>没有返回值而<code>commit</code>返回<code>boolean</code>表明修改是否提交成功</p><pre><code class="hljs Kotlin"><span class="hljs-comment">// 设置共享内存，上传</span><span class="hljs-keyword">val</span> preferences = getSharedPreferences(<span class="hljs-string">&quot;database&quot;</span>, Context.MODE_PRIVATE)preferences.edit().apply &#123;    putString(<span class="hljs-string">&quot;username&quot;</span>,username.text.toString())    putString(<span class="hljs-string">&quot;password&quot;</span>,password.text.toString())&#125;.apply()</code></pre><h3 id="使用Retrofit-Gson-实现网络请求"><a href="#使用Retrofit-Gson-实现网络请求" class="headerlink" title="使用Retrofit + Gson 实现网络请求"></a>使用Retrofit + Gson 实现网络请求</h3><p>注意几点</p><ul><li>如果用<code>http</code>协议，需要写一个<code>xml</code>来开启<code>http</code><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">network-security-config</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">base-config</span> <span class="hljs-attr">cleartextTrafficPermitted</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">network-security-config</span>&gt;</span></code></pre></li><li>在<code>AndroidManifest.xml</code>中加入网络权限请求</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.INTERNET&quot;</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span>/&gt;</span></code></pre><p>先生成<code>retrofit Builder</code></p><pre><code class="hljs kotlin"><span class="hljs-comment">//其中url在本地时，需要用公网ip</span><span class="hljs-keyword">val</span> retrofit = Retrofit.Builder()    .baseUrl(<span class="hljs-string">&quot;http://10.20.35.213:8333/&quot;</span>)    .addConverterFactory(GsonConverterFactory.create())    .build()</code></pre><p>接口设置</p><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">LoginGetAPI</span> </span>&#123;    <span class="hljs-comment">// 代表使用Get方法，根目录下</span>    <span class="hljs-comment">// 发送 name 和 password </span>    <span class="hljs-comment">// 返回的是一个JSON</span>    <span class="hljs-meta">@GET(<span class="hljs-meta-string">&quot;/&quot;</span>)</span>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">loginGet</span><span class="hljs-params">(</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-meta">@Query(<span class="hljs-meta-string">&quot;name&quot;</span>)</span> name: <span class="hljs-type">String</span>,</span></span><span class="hljs-function"><span class="hljs-params">        <span class="hljs-meta">@Query(<span class="hljs-meta-string">&quot;password&quot;</span>)</span> password: <span class="hljs-type">String</span></span></span><span class="hljs-function"><span class="hljs-params">    )</span></span>:Call&lt;String&gt;&#125;</code></pre><pre><code class="hljs kotlin"><span class="hljs-comment">// 创建api</span><span class="hljs-keyword">val</span> api = retrofit.create(LoginGetAPI::<span class="hljs-keyword">class</span>.java)<span class="hljs-comment">// 调用网络请求</span><span class="hljs-comment">// enqueue代表等待回传</span>api.loginGet(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;hey&quot;</span>)    .enqueue(<span class="hljs-keyword">object</span> : Callback&lt;String&gt; &#123;        <span class="hljs-comment">//自动生成收到回应和失败</span>        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(call: <span class="hljs-type">Call</span>&lt;<span class="hljs-type">String</span>&gt;, response: <span class="hljs-type">Response</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;            preferences.edit().apply &#123;                putString(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;丁丁&quot;</span>)                putString(<span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;丁丁的密码&quot;</span>)            &#125;.apply()            startActivity(Intent(intent, TargetPage::<span class="hljs-keyword">class</span>.java))            Log.d(<span class="hljs-string">&quot;Response&quot;</span>, <span class="hljs-string">&quot;complete!&quot;</span>)        &#125;        <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onFailure</span><span class="hljs-params">(call: <span class="hljs-type">Call</span>&lt;<span class="hljs-type">String</span>&gt;, t: <span class="hljs-type">Throwable</span>)</span></span> &#123;            Log.d(<span class="hljs-string">&quot;Hey&quot;</span>,t.toString())        &#125;    &#125;)</code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>游戏设计快乐之道</title>
    <link href="/2020/10/24/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E5%BF%AB%E4%B9%90%E4%B9%8B%E9%81%93/"/>
    <url>/2020/10/24/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E5%BF%AB%E4%B9%90%E4%B9%8B%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h2 id="这是Raph-Koster所著，他在其中对于游戏和认知的理解给了我极大的灵感。"><a href="#这是Raph-Koster所著，他在其中对于游戏和认知的理解给了我极大的灵感。" class="headerlink" title="这是Raph Koster所著，他在其中对于游戏和认知的理解给了我极大的灵感。"></a>这是Raph Koster所著，他在其中对于游戏和认知的理解给了我极大的灵感。</h2><p>我认为游戏的本质是获得快乐。在一定规则中寻找模式，曲折地达到目标。</p><p><strong>模式</strong>，<strong>快乐</strong></p><h3 id="2-大脑的运作"><a href="#2-大脑的运作" class="headerlink" title="2. 大脑的运作"></a>2. 大脑的运作</h3><p>大脑的运作具有<strong>模式化倾向</strong>，她擅长假想，有时能剔除一些不相关的事物。</p><p>相比于无序的事物，秩序的事物更具有吸引力。</p><p>本书提到大脑运行的三个级别</p><ul><li>有意识的思考 （缓慢）</li><li>联想、综合、直观性 (组块化部分， 非常缓慢) </li><li>条件反射 (快)</li></ul><p>许多时候，记忆只是与过去的经验模式进行匹配。而真正的思考的时候往往低效。</p><p>因此学习本身是寻找<strong>模式</strong>的过程，将一个事物进行模块化。</p><p>本书提到了理解的三个阶段</p><ul><li>理智理解</li><li>直观理解</li><li>深刻理解</li></ul><h3 id="3-什么是游戏"><a href="#3-什么是游戏" class="headerlink" title="3. 什么是游戏"></a>3. 什么是游戏</h3><p>本书认为游戏就是谜题。游戏过程和学习过程一样，都需要学习模式，只是游戏将一些系统更加具象化，排除了其他干扰元素。</p><blockquote><p>我还认为，游戏提供了很好的阶段性反馈，使得模式更加强化。（无论是数值，新系统，成就，美术，音乐等等）</p></blockquote><p>一款好的游戏，就是要玩家在停止游戏前，尽量把每一样东西都教给玩家。</p><p>人们常常厌恶学习，是因为教学方法并不吸引人。（完全认同！）</p><p>随着人们逐渐熟悉游戏的模式，就需要新的模式的游戏出现。（这里有点对应核心玩法上的创新）</p><p><strong>游戏构造的越严格，就越受限制</strong></p><p><strong>在玩游戏时，学习就是兴奋剂</strong></p><p>大脑渴望刺激，因此无时无刻不在获取新的数据，但大脑又不希望建立新的系统引起混乱，所以处理数据首先是进行模式匹配，而不是“学习”<br>（很有趣的理论）</p><h4 id="感官剥夺与感官超负荷"><a href="#感官剥夺与感官超负荷" class="headerlink" title="感官剥夺与感官超负荷"></a>感官剥夺与感官超负荷</h4><p>人们产生厌烦的情况</p><ol><li>在游戏最初就完全理解了玩法，因而感到无趣。“太简单了”</li><li>玩家发现游戏要达到可能的变化，需要很多东西。认为这些东西没有作用。“东西太多了”</li><li>对于玩家过于困难，无法找到模式。“太难了”</li><li>游戏模式变化太快了。“太快了”</li><li>玩家完全掌握了游戏所有模式。“我完全掌握了”</li></ol><h3 id="游戏教会我们什么"><a href="#游戏教会我们什么" class="headerlink" title="游戏教会我们什么"></a>游戏教会我们什么</h3><p>其实所有的事物本来都是游戏，但是往往人们因为了解到了背后事物的重要性，就忽略了其中的快乐。</p><p>游戏交给我们“预测胜算”的能力，教会我们如何检视周围环境（“空间关系”）。</p><p>游戏需要玩家理解对于空间行使权力之后的变化。因此游戏往往都不是一个回合结束的。</p><p>其中的快乐也源于对自身生活技能的改善。</p><p>书中认为游戏加强的人类特性</p><ol><li>盲目的领袖崇拜</li><li>严格的等级制度和二元思维方式</li><li>运用武力解决问题</li><li>乐于寻找与自己相似的东西，或者排外</li></ol><p>早期平台视频游戏</p><ol><li><strong>“到另一边”</strong>。如青蛙过河、马里奥。</li><li><strong>“遍历每个角落”</strong>。 如吃豆人。</li></ol><p>手感也很重要，跳跃游戏的空中跳跃时间，几乎与按下跳跃键的时间相同。</p><p>一个动作游戏是教你熟悉情景，训练反射。</p><p>一个策略游戏是教你保持警觉，深思熟虑。</p><h3 id="游戏不是什么"><a href="#游戏不是什么" class="headerlink" title="游戏不是什么"></a>游戏不是什么</h3><p>玩家往往会轻视游戏玩法的道德含义。</p><ul><li>游戏并不是故事</li><li>游戏与美和愉悦无关</li><li>游戏与谋取社会地位无关</li><li>快乐与在特定环境下的学习有关。</li></ul><ol><li>游戏像是一种体验式教学，而故事让你产生共鸣。</li><li>游戏擅长使人客体化，而故事让你沉浸</li><li>游戏是关于人类行为的，而故事是关于想法的</li><li><strong>游戏是玩家叙事的生成器，而故事提供了叙事</strong></li></ol><p>快乐的定义很宽泛，但是表现形式很多。书中将其划分为几类：</p><ol><li><strong>快乐</strong>。一种解决了问题时发自内心的表现</li><li><strong>审美欣赏</strong>。 这里对应于识别出模式的“惊奇感”。</li><li><strong>内心的反应</strong>。 一般表现于对问题的掌握程度。</li><li><strong>不同类型的社会地位更替</strong>。 本质上源于自我形象和社会声望。</li></ol><p>畅感，对于某个事物拥有绝对控制力时，一个恰好符合能力要求的任务出现了。</p><h3 id="人的定位不同"><a href="#人的定位不同" class="headerlink" title="人的定位不同"></a>人的定位不同</h3><p>由于人的偏向性不同，游戏不可能吸引到所有人</p><p>玩家乐于“作弊”。</p>]]></content>
    
    
    <categories>
      
      <category>Book</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Game Design</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学Geometry(一)</title>
    <link href="/2020/10/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6Geometry-%E4%B8%80/"/>
    <url>/2020/10/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6Geometry-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<ul><li>隐式几何 implicit</li></ul><p>并不提供的位置，而提供点的关系(矢量图)</p><ul><li>显示几何 explicit</li></ul><p>把几何表面设想成点的集合，并提供其坐标。<br>将<code>(u,v)</code>映射到三维空间<code>(x,y,z)</code></p>]]></content>
    
    
    <categories>
      
      <category>Computer Graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学Shading(二)</title>
    <link href="/2020/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6Shading-%E4%BA%8C/"/>
    <url>/2020/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6Shading-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="纹理映射"><a href="#纹理映射" class="headerlink" title="纹理映射"></a>纹理映射</h2><p>纹理就是对于表面不同像素的不同基本属性。</p><p>不同属性作为系数与光照相乘，就能得到相应像素的着色。</p><p>纹理映射其实就是将一个二维图像一一映射到物体表面上。</p><p>用纹理坐标<code>(u,v)</code>来定位模型到展开图的位置。</p><blockquote><p>u,v 范围一般都是(0,1)</p></blockquote><p>对于可以无缝衔接的纹理被称为tileable texture。<br>c</p><h3 id="重心坐标-Barycentri-Coordinates"><a href="#重心坐标-Barycentri-Coordinates" class="headerlink" title="重心坐标 Barycentri Coordinates"></a>重心坐标 Barycentri Coordinates</h3><p>为了计算三角形内部每个像素的法线方向，需要计算插值以得到相应平滑的法线向量。</p><p>重心坐标$(\alpha,\beta, \gamma)$定义为：对于三角形ABC，(x,y)可以表示为三个顶点坐标的线性组合，且其系数之和为1。<br>$$(x,y) = \alpha A + \beta B + \gamma C$$<br>$$\alpha +\beta + \gamma = 1$$<br>$$\alpha,\beta, \gamma \ge0$$</p><blockquote><p>其中$\alpha=\beta=\gamma=\frac{1}{3}$时，该点为三角形重心</p></blockquote><p>对于三角形内点的重心坐标，可以通过面积比获得。面积可以通过叉乘的模来得到。<br><img src="../img/Barycentric.png" alt="Barycentri"></p><p>因此应用重心坐标$(\alpha,\beta, \gamma)$可以作为顶点属性的系数计算插值。</p><blockquote><p>投影之后的重心坐标可能会变，所以应该先在三维空间中计算重心坐标，然后应用投影变换。</p></blockquote><h3 id="纹理放大-Texture-Magnification"><a href="#纹理放大-Texture-Magnification" class="headerlink" title="纹理放大 Texture Magnification"></a>纹理放大 Texture Magnification</h3><p>当纹理分辨率小于物体表面时，会出现纹理无法对应，模糊的情况。</p><p>此时应用点查询。</p><p><strong>Nearest</strong> </p><p>直接将其近似，寻找最近的纹理点。 </p><p>这个做法会出现比较严重的锯齿。</p><h4 id="双线性插值Bilinear"><a href="#双线性插值Bilinear" class="headerlink" title="双线性插值Bilinear"></a>双线性插值Bilinear</h4><p>寻找邻近的四个点，通过水平和竖直距离进行线性插值。<br>对于单线性插值可以定义<br>$$lerp(x,v_0,v_1)=v_0+x(v_1-v_0)$$</p><p><strong>水平插值</strong></p><p>因此可以先通过应用水平插值得到在两个对边上的插值。</p><p>$$u_0 = lerp(s,u_{00},u_{10})$$<br>$$u_1 = lerp(s,u_{01},u_{101})$$</p><p><strong>竖直插值</strong></p><p>再将得到的两个插值计算竖直插值。</p><p>$$f(x,y) = lerp(t,u_0,u_1)$$<br><img src="../img/Bilinear.png" alt="Bilinear"></p><h4 id="双向三次插值-Bicubic"><a href="#双向三次插值-Bicubic" class="headerlink" title="双向三次插值 Bicubic"></a>双向三次插值 Bicubic</h4><p>使用周围16个做双向插值。<br>开销较大。</p><p>当纹理分辨率大于物体表面。</p><p>应用范围查询。</p><h4 id="MipMap"><a href="#MipMap" class="headerlink" title="MipMap"></a>MipMap</h4><p>生成图像不同分辨率版本(Level n)，增加纹理缓存命中率。减少计算量。</p><p>通过计算在uv图中两个采样点的距离，选择Mipmap相应level的像素。</p><p>对于非整数值，进行层与层之间的插值计算（三线性插值）。</p><p>额外开销约为三分之一。</p><p><strong>缺陷</strong></p><p>对于一些层数过低的像素，会出现过模糊的情况</p><h4 id="各向异性过滤-anisotropic"><a href="#各向异性过滤-anisotropic" class="headerlink" title="各向异性过滤 anisotropic"></a>各向异性过滤 anisotropic</h4><p>相比mipmap，添加了长宽不同的矩形区域分辨率，覆盖了横竖矩阵查询的情形，减少了过模糊情况。</p><p>额外开销是3倍。</p><h3 id="纹理应用"><a href="#纹理应用" class="headerlink" title="纹理应用"></a>纹理应用</h3><h4 id="环境光贴图"><a href="#环境光贴图" class="headerlink" title="环境光贴图"></a>环境光贴图</h4><p>一般来说用球来记录环境贴图。但是会出现高纬度扭曲的现象。</p><p>后来出现Cubemap，以一个Cube包围盒，然后将其部分映射到立方体某个面上。</p><h4 id="凹凸贴图（法线贴图）"><a href="#凹凸贴图（法线贴图）" class="headerlink" title="凹凸贴图（法线贴图）"></a>凹凸贴图（法线贴图）</h4><p>通过相对高度差，对法线进行扰动</p><h4 id="置换贴图"><a href="#置换贴图" class="headerlink" title="置换贴图"></a>置换贴图</h4><p>实际改变了顶点位置。对模型精度要求高。</p><h4 id="提供着色预计算"><a href="#提供着色预计算" class="headerlink" title="提供着色预计算"></a>提供着色预计算</h4><p>环境光遮蔽</p>]]></content>
    
    
    <categories>
      
      <category>Computer Graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机图形学Shading(一)</title>
    <link href="/2020/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6Shading-%E4%B8%80/"/>
    <url>/2020/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6Shading-%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<p>Shading就是将不同物体应用不同材质，使其表现出明暗差异的过程。</p><p>Blinn-Phong 反射模型一般由3种光照组成</p><ul><li>高光 specular highlight</li><li>漫反射 diffuse reflection </li><li>环境光照 Ambient lighting</li></ul><p>$$L = L_s+L_d+L_a$$</p><h3 id="漫反射-diffuse-reflection"><a href="#漫反射-diffuse-reflection" class="headerlink" title="漫反射 diffuse reflection"></a>漫反射 diffuse reflection</h3><p>计算摄像头所接收到的某个点的着色结果，需要以下输入：</p><ol><li>观测角度 <code>v</code></li><li>法线 <code>n</code></li><li>光线角度 <code>l</code></li><li>还有一系列的表面参数</li></ol><p><img src="./../img/shadingpoint.png" alt="shadingpoint"></p><p>对于一般点光源，单位光照强度会随着距离增加而减少。则对于单位半径的光强<code>I</code><br>$$I_{r} = I/ r^2$$</p><p>由于入射角越小，接收越强。因此可以用入射向量与法线向量的点乘<code>n·l</code>来粗略表明能量吸收率。<br>因此该点的漫反射光为<br>$$L_d = k_d(I/r^2)max(0,n·l)$$<br>其中$k_d$为材质系数</p><h3 id="高光-Specular-highlight"><a href="#高光-Specular-highlight" class="headerlink" title="高光 Specular highlight"></a>高光 Specular highlight</h3><p>当观察方向<code>v</code>和镜面反射方向接近时，就会得到一个高亮区域。也就是高光。</p><p>在布林·冯模型中，为了减少计算量，首先算出入射向量<code>l</code>和观察方向向量<code>v</code>的半程向量<code>h</code>(四边形法则)，计算<code>h</code>和法线<code>n</code>的点乘，来确定两向量是否接近。</p><p>$$L_s = k_s(I/r^2)max(0,n·h)^p$$</p><p><code>p</code>为高光衰减指数。用于缩小高光范围。（范围大概100-200？）</p><h3 id="环境光照-Ambient-Lighting"><a href="#环境光照-Ambient-Lighting" class="headerlink" title="环境光照 Ambient Lighting"></a>环境光照 Ambient Lighting</h3><p>近似地，假设所有点受到的环境光强度$I_a$都相同。</p><p>$$L_a = k_aI_a$$</p><h2 id="着色频率-Shading-Frequencies"><a href="#着色频率-Shading-Frequencies" class="headerlink" title="着色频率 Shading Frequencies"></a>着色频率 Shading Frequencies</h2><p>3种着色类型</p><ul><li>片元着色 Flat Shading </li><li>顶点着色 Gourud Shading</li><li>像素着色 Phong Shading</li></ul><p>对于<strong>顶点</strong>的法线，将所有包含该顶点的面的法线做一个加权平均。<br>$$N_v = \frac{\sum_iN_i}{||\sum_iN_i||}$$</p><p>对于每个<strong>像素</strong>的法线。</p><h2 id="实时渲染管线-Real-time-Rendering"><a href="#实时渲染管线-Real-time-Rendering" class="headerlink" title="实时渲染管线 Real-time Rendering"></a>实时渲染管线 Real-time Rendering</h2><ol><li><strong>顶点处理</strong> Vertex Processing</li><li>生成三角形 Triangle Processing</li><li>光栅化 Rasterization</li><li><strong>片段着色</strong> Fragment Processing</li><li>帧操作（像素拼接）Framebuffer Operations</li></ol><p>由于不同着色方法着色的阶段不同，如Gouraud Shading 可以在顶点阶段进行着色，Phong Shading在Fragment Processing阶段进行着色。<br>因此现代GPU一般Vertex阶段 和 Fragment阶段可编程，被称为<code>Shader</code>，用于定义着色输入和输出。</p>]]></content>
    
    
    <categories>
      
      <category>Computer Graphic</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Blender制作锁链</title>
    <link href="/2020/10/17/Blender%E5%88%B6%E4%BD%9C%E9%94%81%E9%93%BE/"/>
    <url>/2020/10/17/Blender%E5%88%B6%E4%BD%9C%E9%94%81%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>首先生成圆环，将其拉伸成椭圆环。并创建一个空物体<code>ChainTrans</code>。</p><p>添加贝塞尔曲线，用于规划路径。</p><p>在圆环中添加<code>阵列修改器</code>，适配类型选择<code>适配曲线</code>，曲线选择贝塞尔曲线。</p><p>添加<code>曲线修改器</code>，曲线物体选择贝塞尔曲线。</p><p>在<code>阵列修改器</code>中，勾选<code>物体偏移</code>，物体选择<code>ChainTrans</code>，扭转<code>ChainTrans</code>用于产生角度。调整相对偏移系数将<code>锁环</code>相扣。</p><h4 id="相关问题"><a href="#相关问题" class="headerlink" title="相关问题"></a>相关问题</h4><ol><li><strong>Q:</strong> 锁环没法应用到曲线上。</li></ol><p><strong>A:</strong> 对曲线和锁环进行<code>ctrl + a</code> 应用全部变换<br>2. <strong>Q:</strong> 锁环拐角处变形<br><strong>A:</strong> 缩小锁环大小，或者调整曲线斜率</p>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Blender材质</title>
    <link href="/2020/10/17/Blender%E6%9D%90%E8%B4%A8/"/>
    <url>/2020/10/17/Blender%E6%9D%90%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="材质"><a href="#材质" class="headerlink" title="材质"></a>材质</h3><ul><li><p><strong>漫反射材质</strong></p></li><li><p><strong>反射材质</strong></p><ul><li>糙度 （糙度越小，反射效果越强）   </li></ul></li><li><p><strong>透射材质</strong></p><ul><li>糙度 (糙度越小，透射越强)</li><li>折射率 (根据不同物体折射率模拟物体)</li></ul></li><li><p><strong>发光材质</strong></p><ul><li>强度 </li></ul></li></ul><h3 id="Blender-原理化着色器"><a href="#Blender-原理化着色器" class="headerlink" title="Blender 原理化着色器"></a>Blender 原理化着色器</h3><p>使用BSDF(双向散射分布函数)来定义光在物体表面的反射与折射方式。</p><h3 id="Blender-节点着色器"><a href="#Blender-节点着色器" class="headerlink" title="Blender 节点着色器"></a>Blender 节点着色器</h3>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
      <category>Material</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Blender操作</title>
    <link href="/2020/10/16/Blender%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/10/16/Blender%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="变换操作"><a href="#变换操作" class="headerlink" title="变换操作"></a>变换操作</h3><ul><li>平移 <code>g</code></li><li>旋转 <code>r</code></li><li>缩放 <code>s</code></li><li>挤出 <code>e</code></li><li>删除 <code>x</code></li><li>插入面 <code>i</code></li><li>缝合面 <code>f</code></li><li>添加倒角 <code>ctrl + b</code></li><li></li></ul><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><ul><li>打开视图 <code>n</code></li><li>更换着色方式 <code>z</code></li><li>复制物体 <code>shift + d</code></li><li>添加物体 <code>shift + a</code></li><li>设置父级 <code>ctrl + p</code></li><li>合并物体 <code>ctrl + j</code></li><li>应用修改器 <code>ctrl + a</code></li></ul><h4 id="设置物体原点"><a href="#设置物体原点" class="headerlink" title="设置物体原点"></a>设置物体原点</h4><p>先按<code>tab</code>进入编辑模式，设置游标到目标位置 <code>shift + s</code>，然后进入物体模式，将原点对齐到游标。</p><h4 id="批量复制、偏移"><a href="#批量复制、偏移" class="headerlink" title="批量复制、偏移"></a>批量复制、偏移</h4><p>在修改器中添加<code>阵列修改器</code>,添加物体偏移，修改参数后按<code>ctrl + a</code>应用</p>]]></content>
    
    
    <categories>
      
      <category>Blender</category>
      
      <category>Operation</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
